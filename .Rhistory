})
library(tidyverse)
require(data.world)
library(class)
require(data.world)
require(ggplot2)
data.world::set_config(cfg_env("DW_API"))
knitr::opts_chunk$set(echo = TRUE)
sessionInfo()
project <- "https://data.world/cct685/bank-marketing"
df <- data.world::query(
data.world::qry_sql("SELECT * FROM banking_data"),
dataset = project)
Xy=cbind(balance,duration)
bank.knntrain=month != "jun"
knn.pred=knn(Xy[bank.knntrain,],Xy[!bank.knntrain,],y[bank.knntrain],k=1)
table(knn.pred,y[!bank.knntrain])
mean(knn.pred==y[!bank.knntrain])
Xy=cbind(df$balance,df$duration)
bank.knntrain=month != "jun"
knn.pred=knn(Xy[bank.knntrain,],Xy[!bank.knntrain,],y[bank.knntrain],k=1)
table(knn.pred,y[!bank.knntrain])
mean(knn.pred==y[!bank.knntrain])
Xy=cbind(df$balance,df$duration)
bank.knntrain=df$month != "jun"
knn.pred=knn(Xy[bank.knntrain,],Xy[!bank.knntrain,],y[bank.knntrain],k=1)
table(knn.pred,y[!bank.knntrain])
mean(knn.pred==y[!bank.knntrain])
install.packages("class")
Xy=cbind(df$balance,df$duration)
bank.knntrain=df$month != "jun"
knn.pred=knn(Xy[bank.knntrain,],Xy[!bank.knntrain,],y[bank.knntrain],k=1)
table(knn.pred,y[!bank.knntrain])
mean(knn.pred==y[!bank.knntrain])
library(tidyverse)
require(data.world)
library(class)
require(data.world)
require(ggplot2)
data.world::set_config(cfg_env("DW_API"))
knitr::opts_chunk$set(echo = TRUE)
Xy=cbind(df$balance,df$duration)
bank.knntrain=df$month != "jun"
knn.pred=knn(Xy[bank.knntrain,],Xy[!bank.knntrain,],y[bank.knntrain],k=1)
table(knn.pred,y[!bank.knntrain])
mean(knn.pred==y[!bank.knntrain])
Xy=cbind(df$balance,df$duration)
bank.knntrain=df$month != "jun"
knn.pred=knn(Xy[bank.knntrain,],Xy[!bank.knntrain,],Xy[bank.knntrain],k=1)
table(knn.pred,y[!bank.knntrain])
mean(knn.pred==y[!bank.knntrain])
library(tidyverse)
require(data.world)
library(class)
require(data.world)
require(ggplot2)
data.world::set_config(cfg_env("DW_API"))
knitr::opts_chunk$set(echo = TRUE)
sessionInfo()
project <- "https://data.world/cct685/bank-marketing"
df <- data.world::query(
data.world::qry_sql("SELECT * FROM banking_data"),
dataset = project)
Xy=cbind(df$balance,df$duration)
bank.knntrain=df$month != "jun"
knn.pred=knn(Xy[bank.knntrain,],Xy[!bank.knntrain,],Xy[bank.knntrain],k=1)
table(knn.pred,y[!bank.knntrain])
mean(knn.pred==y[!bank.knntrain])
Xy=cbind(df$balance,df$duration)
bank.knntrain=df$month != "jun"
knn.pred=knn(Xy[bank.knntrain,],Xy[!bank.knntrain,],Xy[bank.knntrain],k=1)
table(knn.pred,y[!bank.knntrain])
mean(knn.pred==y[!bank.knntrain])
Xy[bank.knntrain,]
Xy=cbind(df$balance,df$duration)
bank.knntrain=df$month != "jun"
knn.pred=knn(Xy[bank.knntrain,],Xy[!bank.knntrain,],y[bank.knntrain],k=1)
table(knn.pred,y[!bank.knntrain])
mean(knn.pred==y[!bank.knntrain])
Xy=cbind(df$balance,df$duration)
bank.knntrain=df$month != "jun"
knn.pred=knn(Xy[bank.knntrain,],Xy[!bank.knntrain,],Xy[bank.knntrain],k=1)
table(knn.pred,Xy[!bank.knntrain])
mean(knn.pred==Xy[!bank.knntrain])
Xy=cbind(df$balance,df$duration)
bank.knntrain=df$month != "jun"
knn.pred=knn(Xy[bank.knntrain,],Xy[!bank.knntrain,],Xy[bank.knntrain],k=1)
table(knn.pred,Xy[!bank.knntrain])
mean(knn.pred==Xxy[!bank.knntrain])
Xy[bank.knntrain,]
len(Xy[bank.knntrain,])
length(Xy[bank.knntrain,])
length(Xy[bank.knntrain])
Xy=cbind(df$balance,df$duration)
bank.knntrain=df$month != "jun"
knn.pred=knn(Xy[bank.knntrain,],Xy[!bank.knntrain,],Xy[bank.knntrain,],k=1)
table(knn.pred,Xy[!bank.knntrain])
mean(knn.pred==Xxy[!bank.knntrain])
Xy=cbind(df$balance,df$duration)
bank.knntrain=df$month != "jun"
knn.pred=knn(Xy[bank.knntrain,],Xy[!bank.knntrain,],df[bank.knntrain,],k=1)
table(knn.pred,Xy[!bank.knntrain])
mean(knn.pred==Xxy[!bank.knntrain])
project <- "https://data.world/cct685/bank-marketing"
data.world::set_config(save_config(auth_token = ""))
df <- data.world::query(
data.world::qry_sql("SELECT * FROM banking_data"),
dataset = project)
summary(df)
library(class)
attach(df)
require(data.world)
require(ggplot2)
#logistic regression
#knn
Xy=cbind(balance,duration)
bank.knntrain=month != "jun"
knn.pred=knn(Xy[bank.knntrain,],Xy[!bank.knntrain,],y[bank.knntrain],k=1)
table(knn.pred,y[!bank.knntrain])
mean(knn.pred==y[!bank.knntrain])
#linear discriminant analysis
bank.ldasubset <- sample(1:150, 75)
lda.fit=lda(y~balance+duration,data=df, subset= bank.ldasubset)
lda.fit
plot(lda.fit)
bank.ldatrain=subset(df,month=="jun")
bank.ldapredict = predict(lda.fit, df[-bank.ldasubset, ])
data.frame(bank.ldapredict)[1:5,]
dflda = data.frame(bank.ldapredict)
lda.class = predict(lda.fit, bank.ldatrain)
table(lda.class$class,bank.ldatrain$y)
mean(lda.class$class==bank.ldatrain$y)
#quadratic discriminant analysis
bank.qdasubset=month != "jun"
qda.fit = qda(y~balance+duration, data = df, subset=bank.qdasubset)
qda.fit # Notice - no coeficients.
bank.qdatrain = subset(df, month == "jun")
bank.qdapredict = predict(qda.fit, df[-bank.qdasubset, ])
data.frame(bank.qdapredict)[1:5,]
dfqda = data.frame(bank.qdapredict)
data.frame(bank.qdatrain)[1:5,]
qda.class = predict(qda.fit, bank.qdatrain)
table(qda.class$class,bank.qdatrain$y)
mean(qda.class$class==bank.qdatrain$y)
require(ISLR)
## K-Nearest Neighbors
library(class)
?knn
attach(Smarket)
Xlag=cbind(Lag1,Lag2)
train=Year<2005
knn.pred=knn(Xlag[train,],Xlag[!train,],Direction[train],k=1)
table(knn.pred,Direction[!train])
mean(knn.pred==Direction[!train])
Direction
Xy=cbind(df$balance,df$duration)
bank.knntrain=month != "jun"
knn.pred=knn(Xy[bank.knntrain,],Xy[!bank.knntrain,],df$y[bank.knntrain],k=1)
table(knn.pred,df$y[!bank.knntrain])
mean(knn.pred==df$y[!bank.knntrain])
Xy=cbind(df$balance,df$duration)
bank.knntrain=month != "jun"
knn.pred=knn(Xy[bank.knntrain,],Xy[!bank.knntrain,],df$y[bank.knntrain],k=1)
table(knn.pred,df$y[!bank.knntrain])
mean(knn.pred==df$y[!bank.knntrain])
bank.ldasubset <- sample(1:150, 75)
lda.fit=lda(y~balance+duration,data=df, subset= bank.ldasubset)
lda.fit
plot(lda.fit)
bank.ldatrain=subset(df,month=="jun")
bank.ldapredict = predict(lda.fit, df[-bank.ldasubset, ])
data.frame(bank.ldapredict)[1:5,]
dflda = data.frame(bank.ldapredict)
lda.class = predict(lda.fit, bank.ldatrain)
table(lda.class$class,bank.ldatrain$y)
mean(lda.class$class==bank.ldatrain$y)
library(tidyverse)
require(data.world)
library(class)
require(data.world)
require(ggplot2)
require(MASS)
data.world::set_config(cfg_env("DW_API"))
knitr::opts_chunk$set(echo = TRUE)
bank.ldasubset <- sample(1:150, 75)
lda.fit=lda(y~balance+duration,data=df, subset= bank.ldasubset)
lda.fit
plot(lda.fit)
bank.ldatrain=subset(df,month=="jun")
bank.ldapredict = predict(lda.fit, df[-bank.ldasubset, ])
data.frame(bank.ldapredict)[1:5,]
dflda = data.frame(bank.ldapredict)
lda.class = predict(lda.fit, bank.ldatrain)
table(lda.class$class,bank.ldatrain$y)
mean(lda.class$class==bank.ldatrain$y)
mean(knn.pred==Direction[!train])
bank.ldasubset <- sample(1:150, 75)
lda.fit=lda(y~balance+duration,data=df, subset= bank.ldasubset)
lda.fit
plot(lda.fit)
bank.ldatrain=subset(df,month=="jun")
bank.ldapredict = predict(lda.fit, df[-bank.ldasubset, ])
data.frame(bank.ldapredict)[1:5,]
dflda = data.frame(bank.ldapredict)
lda.class = predict(lda.fit, bank.ldatrain)
table(lda.class$class,bank.ldatrain$y)
mean(lda.class$class==bank.ldatrain$y)
#quadratic discriminant analysis
bank.qdasubset=month != "jun"
qda.fit = qda(y~balance+duration, data = df, subset=bank.qdasubset)
qda.fit # Notice - no coeficients.
bank.qdatrain = subset(df, month == "jun")
bank.qdapredict = predict(qda.fit, df[-bank.qdasubset, ])
data.frame(bank.qdapredict)[1:5,]
dfqda = data.frame(bank.qdapredict)
data.frame(bank.qdatrain)[1:5,]
qda.class = predict(qda.fit, bank.qdatrain)
table(qda.class$class,bank.qdatrain$y)
mean(qda.class$class==bank.qdatrain$y)
#quadratic discriminant analysis
bank.qdasubset=df$month != "jun"
qda.fit = qda(y~balance+duration, data = df, subset=bank.qdasubset)
qda.fit # Notice - no coeficients.
bank.qdatrain = subset(df, month == "jun")
bank.qdapredict = predict(qda.fit, df[-bank.qdasubset, ])
data.frame(bank.qdapredict)[1:5,]
dfqda = data.frame(bank.qdapredict)
data.frame(bank.qdatrain)[1:5,]
qda.class = predict(qda.fit, bank.qdatrain)
table(qda.class$class,bank.qdatrain$y)
mean(qda.class$class==bank.qdatrain$y)
plot.df = data.frame(Xy[!bank.knntrain,], predicted = knn.pred)
Xy=cbind(df$balance,df$duration)
bank.knntrain=df$month != "jun"
knn.pred=knn(Xy[bank.knntrain,],Xy[!bank.knntrain,],df$y[bank.knntrain],k=1)
table(knn.pred,df$y[!bank.knntrain])
mean(knn.pred==df$y[!bank.knntrain])
ggplot(df, aes(balance, duration, color = knn.pred, fill = knn.pred)) +
geom_point(size = 5) +
geom_polygon(data = boundary, aes(x,y), alpha = 0.5)
Xy=cbind(df$balance,df$duration)
bank.knntrain=df$month != "jun"
knn.pred=knn(Xy[bank.knntrain,],Xy[!bank.knntrain,],df$y[bank.knntrain],k=1)
table(knn.pred,df$y[!bank.knntrain])
mean(knn.pred==df$y[!bank.knntrain])
ggplot(df, aes(balance, duration, color = knn.pred, fill = knn.pred)) +
geom_point(size = 5)
Xy=cbind(df$balance,df$duration)
bank.knntrain=df$month != "jun"
knn.pred=knn(Xy[bank.knntrain,],Xy[!bank.knntrain,],df$y[bank.knntrain],k=1)
table(knn.pred,df$y[!bank.knntrain])
mean(knn.pred==df$y[!bank.knntrain])
ggplot(df[!bank.knntrain], aes(balance, duration, color = knn.pred, fill = knn.pred)) +
geom_point(size = 5)
(df[!bank.knntrain])
Xy=cbind(df$balance,df$duration)
bank.knntrain=df$month != "jun"
knn.pred=knn(Xy[bank.knntrain,],Xy[!bank.knntrain,],df$y[bank.knntrain],k=1)
table(knn.pred,df$y[!bank.knntrain])
mean(knn.pred==df$y[!bank.knntrain])
ggplot(Xy, aes(balance, duration, color = knn.pred, fill = knn.pred)) +
geom_point(size = 5)
Xy=cbind(df$balance,df$duration)
bank.knntrain=df$month != "jun"
knn.pred=knn(Xy[bank.knntrain,],Xy[!bank.knntrain,],df$y[bank.knntrain],k=1)
table(knn.pred,df$y[!bank.knntrain])
mean(knn.pred==df$y[!bank.knntrain])
Xy
ggplot(df,aes(df$balance, df$duration)) + geom_point()
ggplot(df,aes(df$balance, df$duration)) + geom_point(colour=df$y)
ggplot(df,aes(df$balance, df$duration)) + geom_point(group_by=df$y)
ggplot(df,aes(df$balance, df$duration)) + geom_point(colour=dy)
ggplot(df,aes(df$balance, df$duration)) + geom_point(colour=y)
ggplot(df,aes(df$balance, df$duration, color=df$y)) + geom_point()
mean(knn.pred==df$y[!bank.knntrain])
ggplot(df,aes(df$balance, df$duration, color=knn.pred==df$y[!bank.knntrain])) + geom_point()
ggplot(df,aes(df$balance[!bank.knntrain], df$duration[!bank.knntrain], color=knn.pred==df$y[!bank.knntrain])) + geom_point()
ggplot(df[!bank.knntrain],aes(df$balance[!bank.knntrain], df$duration[!bank.knntrain], color=knn.pred==df$y[!bank.knntrain])) + geom_point()
ggplot(df[!bank.knntrain],aes(df$balance, df$duration, color=df$y)) + geom_point()
knn.pred
table(knn.pred,df$y[!bank.knntrain])
subset(df, df$y[!bank.knntrain])
subset(df, month != "jun")
subset(df, month = "jun")
ggplot(subset(df, month = "jun"),aes(df$balance, df$duration, color=df$y)) + geom_point()
ggplot(subset(df, month = "jun"),aes(balance, df$duration, color=df$y)) + geom_point()
ggplot(subset(df, month = "jun"),aes(balance, duration, color=df$y)) + geom_point()
ggplot(subset(df, month = "jun"),aes(balance, duration, color=y==knn.pred)) + geom_point()
ggplot(subset(df, month = "jun"),aes(balance, duration, color=y==knn.pred)) + geom_point(labels=c("Incorrectly Labeled", "COrrectly Labeled"))
ggplot(subset(df, month = "jun"),aes(balance, duration, color=y==knn.pred)) + geom_point() + scale_color_manual(labels=c("Incorrectly Labeled", "COrrectly Labeled"))
ggplot(subset(df, month = "jun"),aes(balance, duration, color=y==knn.pred)) + geom_point()
df$balance
mean(knn.pred==df$y[!bank.knntrain])
table(knn.pred,df$y[!bank.knntrain])
36/433
19/43
Xy=cbind(df$balance,df$duration, df$loan)
bank.knntrain=df$month != "jun"
knn.pred=knn(Xy[bank.knntrain,],Xy[!bank.knntrain,],df$y[bank.knntrain],k=1)
bank.knntrain=df$month != "jun"
knn.pred=knn(Xy[bank.knntrain,],Xy[!bank.knntrain,],df$y[bank.knntrain],k=1)
bank.qdasubset=df$month != "jun"
qda.fit = qda(y~balance+duration, data = df, subset=bank.qdasubset)
qda.fit # Notice - no coeficients.
bank.qdatrain = subset(df, month == "jun")
bank.qdapredict = predict(qda.fit, df[-bank.qdasubset, ])
data.frame(bank.qdapredict)[1:5,]
dfqda = data.frame(bank.qdapredict)
data.frame(bank.qdatrain)[1:5,]
qda.class = predict(qda.fit, bank.qdatrain)
table(qda.class$class,bank.qdatrain$y)
mean(qda.class$class==bank.qdatrain$y)
print("dasfa")
Xy=cbind(df$balance,df$pdays)
knn.pred=knn(Xy[bank.knntrain,],Xy[!bank.knntrain,],df$y[bank.knntrain],k=1)
bank.knntrain=df$month != "jun"
table(knn.pred,df$y[!bank.knntrain])
table(knn.pred,df$y[!bank.knntrain])
mean(knn.pred==df$y[!bank.knntrain])
Xy=cbind(df$balance,df$pdays)
bank.knntrain=df$month != "jun"
knn.pred=knn(Xy[bank.knntrain,],Xy[!bank.knntrain,],df$y[bank.knntrain],k=1)
table(knn.pred,df$y[!bank.knntrain])
mean(knn.pred==df$y[!bank.knntrain])
duration
bank.knntrain=df$month != "jun"
table(knn.pred,df$y[!bank.knntrain])
mean(knn.pred==df$y[!bank.knntrain])
Xy=cbind(df$balance,df$duration)
bank.knntrain=df$month != "jun"
knn.pred=knn(Xy[bank.knntrain,],Xy[!bank.knntrain,],df$y[bank.knntrain],k=1)
table(knn.pred,df$y[!bank.knntrain])
mean(knn.pred==df$y[!ban
Xy=cbind(df$balance,df$duration)
bank.knntrain=df$month != "jun"
knn.pred=knn(Xy[bank.knntrain,],Xy[!bank.knntrain,],df$y[bank.knntrain],k=1)
table(knn.pred,df$y[!bank.knntrain])
mean(knn.pred==df$y[!ban
mean(knn.pred==df$y[!bank.knntrain])
bank.ldasubset <- sample(1:150, 75)
lda.fit=lda(y~balance+duration,data=df, subset= bank.ldasubset)
lda.fit
renderPlot({
plot(lda.fit)
})
bank.ldatrain=subset(df,df$month=="jun")
bank.ldapredict = predict(lda.fit, df[-bank.ldasubset, ])
data.frame(bank.ldapredict)[1:5,]
dflda = data.frame(bank.ldapredict)
lda.class = predict(lda.fit, bank.ldatrain)
table(lda.class$class,bank.ldatrain$y)
mean(lda.class$class==bank.ldatrain$y)
plot(lda.fit)
lda.fit
lda.fit$LD1
bank.qdasubset=df$month != "jun"
qda.fit = qda(y~balance+duration, data = df, subset=bank.qdasubset)
qda.fit # Notice - no coeficients.
bank.qdatrain = subset(df, month == "jun")
bank.qdapredict = predict(qda.fit, df[-bank.qdasubset, ])
data.frame(bank.qdapredict)[1:5,]
dfqda = data.frame(bank.qdapredict)
data.frame(bank.qdatrain)[1:5,]
qda.class = predict(qda.fit, bank.qdatrain)
table(qda.class$class,bank.qdatrain$y)
mean(qda.class$class==bank.qdatrain$y)
bank.ldasubset <- sample(1:150, 75)
glm.fit=glm(y~balance+duration,data=df, subset = bank.ldasubset)
glm.fit
bank.ldasubset <- sample(1:150, 75)
glm.fit=glm(y~balance+duration,data=df, subset = bank.ldasubset)
glm.fit=glm(as.integer(y)~balance+duration,data=df, subset = bank.ldasubset)
glm.fit=glm(as.integer(y)~balance+duration,data=df, subset = bank.ldasubset)
glm.fit=glm(as.integer(df$y)~balance+duration,data=df, subset = bank.ldasubset)
df$y_int <- as.integer(df$y)
df
df$y_int
df$y_int <- as.integer(as.logical(df$y))
df$y_int
glm.fit=glm(y_int~balance+duration,data=df, subset = bank.ldasubset)
glm.fit
summary(glm.fit)
glm.probs=predict(glm.fit,type="response")
glm.fit=glm(y_int~balance+duration,data=df, subset = bank.ldasubset, family=binomial)
glm.fit
summary(glm.fit)
glm.probs=predict(glm.fit,type="response")
bank.glmsubset <- sample(1:150, 75)
df$y_int <- as.integer(as.logical(df$y))
glm.fit=glm(y_int~balance+duration,data=df, subset = bank.glmsubset, family=binomial)
glm.fit
summary(glm.fit)
glm.probs=predict(glm.fit, newdata = df[-bank.glmsubset, ], type="response")
bank.glmsubset <- sample(1:150, 75)
df$y_int <- as.integer(as.logical(df$y))
glm.fit=glm(y_int~balance+duration,data=df, subset = bank.glmsubset, family=binomial)
glm.fit
summary(glm.fit)
glm.probs=predict(glm.fit, newdata = df[-bank.glmsubset, ], type="response")
data.frame(bank.glmpredict)[1:5,]
glm.pred=ifelse(glm.probs >0.5,"Yes","No")
table(glm.pred,df$y[-bank.glmsubset, ])
glm.pred
length(df$y)
length(df$y[-bank.glmsubset, ])
length(df$y[-bank.glmsubset ])
glm.probs=predict(glm.fit, newdata = df[-bank.glmsubset, ], type="response")
data.frame(bank.glmpredict)[1:5,]
glm.pred=ifelse(glm.probs >0.5,"Yes","No")
table(glm.pred,df$y[-bank.glmsubset])
mean(glm.pred==Direction.2005)
table(glm.pred,df$y[-bank.glmsubset])
mean(glm.pred==df$y[-bank.glmsubset])
mean(glm.pred==df$y[-bank.glmsubset])
glm.pred
mean(glm.pred==df$y[-bank.glmsubset])
mean(glm.pred == df$y[-bank.glmsubset])
table(glm.pred,df$y[-bank.glmsubset])
glm.pred=ifelse(glm.probs >0.5, TRUE,FALSE)
table(glm.pred,df$y[-bank.glmsubset])
glm.pred=ifelse(glm.probs >0.5, true, false)
glm.pred=ifelse(glm.probs >0.5, 1, 0)
table(glm.pred,df$y_int[-bank.glmsubset])
mean(glm.pred == df$y_int[-bank.glmsubset])
bank.glmsubset <- sample(1:150, 75)
df$y_int <- as.integer(as.logical(df$y))
glm.fit=glm(y_int~balance+duration,data=df, subset = bank.glmsubset, family=binomial)
glm.fit
summary(glm.fit)
glm.probs=predict(glm.fit, newdata = df[-bank.glmsubset], type="response")
data.frame(bank.glmpredict)[1:5,]
glm.pred=ifelse(glm.probs >0.5, 1, 0)
bank.glmsubset <- sample(1:150, 75)
df$y_int <- as.integer(as.logical(df$y))
glm.fit=glm(y_int~balance+duration,data=df, subset = bank.glmsubset, family=binomial)
glm.fit
summary(glm.fit)
glm.probs=predict(glm.fit, newdata = df[-bank.glmsubset], type="response")
glm.probs=predict(glm.fit, newdata = df[!bank.glmsubset], type="response")
glm.probs=predict(glm.fit, newdata = df[-bank.glmsubset,], type="response")
glm.pred=ifelse(glm.probs >0.5, 1, 0)
table(glm.pred,df$y_int[-bank.glmsubset])
mean(glm.pred == df$y_int[-bank.glmsubset])
View(df)
View(df)
View(df)
table(lda.class$class,bank.ldatrain$y)
sum(df$y)
sum(df$y_int)
lenth(df)
length(df)
length(df$y_int)
521/4521
library(tidyverse)
require(data.world)
library(class)
require(data.world)
require(ggplot2)
require(MASS)
data.world::set_config(cfg_env("DW_API"))
project <- "https://data.world/cct685/bank-marketing"
df <- data.world::query(
data.world::qry_sql("SELECT * FROM banking_data"),
dataset = project)
Xy=cbind(df$balance,df$duration)
bank.knntrain=df$month != "jun"
knn.pred=knn(Xy[bank.knntrain,],Xy[!bank.knntrain,],df$y[bank.knntrain],k=1)
table(knn.pred,df$y[!bank.knntrain])
mean(knn.pred==df$y[!bank.knntrain])
df$y_int <- as.integer(as.logical(df$y))
sum(df$y_int)
sum(df$y_int) / length(df)
sum(df$y_int) / length(df$y_int)
1 - (sum(df$y_int) / length(df$y_int))
Xy=cbind(df$balance,df$duration)
bank.knntrain=df$month != "jun"
knn.pred=knn(Xy[bank.knntrain,],Xy[!bank.knntrain,],df$y[bank.knntrain],k=1)
table(knn.pred,df$y[!bank.knntrain])
mean(knn.pred==df$y[!bank.knntrain])
renderPlot({
ggplot(subset(df, month = "jun"),aes(balance, duration, color=y==knn.pred)) + geom_point()
})
bank.ldasubset <- sample(1:150, 75)
lda.fit=lda(y~balance+duration,data=df, subset= bank.ldasubset)
lda.fit
bank.ldatrain=subset(df,df$month=="jun")
bank.ldapredict = predict(lda.fit, df[-bank.ldasubset, ])
data.frame(bank.ldapredict)[1:5,]
dflda = data.frame(bank.ldapredict)
lda.class = predict(lda.fit, bank.ldatrain)
table(lda.class$class,bank.ldatrain$y)
mean(lda.class$class==bank.ldatrain$y)
bank.glmsubset <- sample(1:150, 75)
df$y_int <- as.integer(as.logical(df$y))
glm.fit=glm(y_int~balance+duration,data=df, subset = bank.glmsubset, family=binomial)
glm.fit
summary(glm.fit)
glm.probs=predict(glm.fit, newdata = df[-bank.glmsubset,], type="response")
glm.pred=ifelse(glm.probs >0.5, 1, 0)
table(glm.pred,df$y_int[-bank.glmsubset])
mean(glm.pred == df$y_int[-bank.glmsubset])
bank.qdasubset=df$month != "jun"
qda.fit = qda(y~balance+duration, data = df, subset=bank.qdasubset)
qda.fit # Notice - no coeficients.
bank.qdatrain = subset(df, month == "jun")
bank.qdapredict = predict(qda.fit, df[-bank.qdasubset, ])
data.frame(bank.qdapredict)[1:5,]
dfqda = data.frame(bank.qdapredict)
data.frame(bank.qdatrain)[1:5,]
qda.class = predict(qda.fit, bank.qdatrain)
table(qda.class$class,bank.qdatrain$y)
mean(qda.class$class==bank.qdatrain$y)
